{{#globals}}
{{> global}}
{{/globals}}

{{#variable}}
{{> global}}

var fs       = require('fs'),
    source   = fs.readFileSync('{{{location}}}', 'utf8'),{{/variable}}
    lines    = source.split('\n'),
    jasmine  = require('jasmine-node'),
    env      = jasmine.getEnv();

// TODO: Roughly this same code is duplicated in bin/autodoc. Put it somewhere
// shared.
function displayLine(lineNumber) {
  var startingLine = Math.max(lineNumber - 5, 0);
  var endingLine   = lineNumber + 5;

  // Display surrounding lines, for context
  var linesBefore  = lines.slice(startingLine, lineNumber);
  var linesAfter   = lines.slice(lineNumber + 1, lineNumber + 5);

  linesBefore.forEach(function(line, i) {
    line = (startingLine + i) + ': ' + line;

    // Add a blank line between displayed lines for readability
    if (i === 0) {
      line = '\n' + line;
    }

    console.error(line);
  });

  // Highlight the offending line to make it obvious
  console.error('\x1B[31m' + lineNumber + ': ' + lines[lineNumber] + '\x1B[39m');

  linesAfter.forEach(function(line, i) {
    console.error((lineNumber + 1 + i) + ': ' + line);
  });
}

// TODO: This template shouldn't rely on the _commander variable leaking in
// from JS being eval'd in bin/autodoc!
var reporterType = _commander.verbose ?
  jasmine.TerminalVerboseReporter :
  jasmine.TerminalReporter;

env.addReporter(new reporterType({
  print: process.stdout.write.bind(process.stdout),
  color: true,
  includeStackTrace: true
}));

var failingLines = [];
env.addReporter({
  reportSpecResults: function(spec) {
    if (!spec.results().passed()) {
      failingLines.push(spec.absoluteLine);
    }
  },

  reportRunnerResults: function() {
    if (failingLines.length > 0) {
      console.error('Failures occurred on the following Autodoc-generated tests');
      console.error('==========================================================');

      for (var i = 0, len = failingLines.length; i < len; ++i) {
        displayLine(failingLines[i]);
      }
    }
  }
});

{{{exampleHelpers}}}

{{#privateMembers}}
var {{shortName}} = {{{source}}};
{{#methods}}
{{longName}} = {{{source}}};
{{/methods}}
{{/privateMembers}}

{{#namespaces}}
{{#hasExamples}}
describe('{{namespace}}', function() {
  {{#allMembers}}
    {{> examples}}
  {{/allMembers}}
});
{{/hasExamples}}
{{/namespaces}}

env.execute();
