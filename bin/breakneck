#!/usr/bin/env node

/*
 * I apologize in advance to anyone reading this file.
 * It is a mess. Needs some serious refactoring.
 * My primary goal right now is to focus on making it just work,
 * specifically for Lazy.js (http://danieltao.com/lazy.js/).
 * Once that's done I will do my best to circle back and clean this up!
 */

global.doctrine  = require('doctrine');
global.esprima   = require('esprima');
global.localLazy = require('lazy.js');
global.marked    = require('marked');

var fs           = require('fs'),
    path         = require('path'),
    Breakneck    = require(path.join(__dirname, '../breakneck')),
    stringTable  = require('string-table'),
    commander    = require('commander'),
    Mustache     = require('mustache');

require('colors');
require('should');

var packagePath = path.join(__dirname, '../package.json'),
    packageInfo = JSON.parse(fs.readFileSync(packagePath));

function split(str) {
  return str.split(/,\s*/);
}

commander
  .version(packageInfo.version)
  .usage('[options] [file]')
  .option('-t, --test', 'run tests')
  .option('-p, --perf', 'run performance benchmarks')
  .option('-v, --variable <name>', 'provide a name for the variable traditionally used by the library (e.g., jQuery, $, _) -- used for tests and benchmarks')
  .option('-o, --output <destination>', 'specify an output directory (defaults to "docs")')
  .option('-n, --namespaces <names>', 'provide a comma-separated list of the namespaces to document (defaults to all, in alphabetical order)', split)
  .option('-j, --javascripts <sources>', 'specify additional JS dependencies (comma-separated)', split)
  .parse(process.argv);

if (process.argv.length <= 2) {
  commander.help();
  process.exit();
}

function getLast(arr) {
  return arr[arr.length - 1];
}

var filePath     = getLast(process.argv),
    outputDir    = commander.output || 'docs',
    javascripts  = commander.javascripts || [],
    helperPath   = path.join(outputDir, 'doc_helper.js'),
    helperExists = fs.existsSync(helperPath),
    libraryInfo  = Breakneck.parse(fs.readFileSync(filePath, 'utf-8'));

function runTests() {
  // I'm punting on this whole thing for now. Not top priority.
  console.log("\n\n----- NOTE: This doesn't really work very well just yet :( -----\n\n");

  // Load the file itself
  if (commander.variable) {
    eval('var ' + commander.variable + ' = require("' + filePath + '");');
  } else {
    require(filePath);
  }

  // Require doc_helper.js, if it exists
  if (helperExists) {
    // Need to eval here rather than use require, because otherwise Node will
    // wrap it up in a closure. (Yeah, yeah, I know...)
    eval(fs.readFileSync(helperPath, 'utf-8'));
  }

  // Define this if we need it.
  if (typeof assertEquality !== 'function') {
    assertEquality = function(actual, expected) {
      (actual || '[null or undefined]').should.eql(expected);
    };
  }

  // Run the tests
  localLazy(libraryInfo.docs)
    .filter(function(doc) { return doc.hasExamples; })
    .each(function(doc) {

      console.log(doc.name + '\n');

      var outcomes = [];

      // Run any necessary setup code
      // TODO: Think of a way to like put this in a closure or something...
      eval(doc.examples.setup);

      // Also display it, just because why not?
      console.log(doc.examples.setup);

      localLazy(doc.examples.examples).each(function(example) {
        var outcome = {
          'case': example.input,
          'expected': example.output
        };

        try {
          var actual   = eval(example.input),
              expected = eval(example.output);

          assertEquality(actual, expected);

          outcome.result = 'PASS'.green;

        } catch (e) {
          outcome.result = e.message.red;
        }

        outcomes.push(outcome);
      });

      console.log(stringTable.create(outcomes) + '\n');

    });
}

function runBenchmarks() {
  console.log("\n\n----- Running benchmarks isn't implemented yet. -----\n\n");
}

if (commander.test) {
  runTests();
  return;
}

if (commander.perf) {
  runBenchmarks();
  return;
}

var groupedByNamespace = localLazy(libraryInfo.docs)
  .groupBy('namespace')
  .toObject();

// Only include specified namespaces, if the option has been provided.
var namespaces = localLazy(commander.namespaces || Object.keys(groupedByNamespace))
  .map(function(namespace) {
    // Find the corresponding constructor, if one exists.
    var constructorMethod = localLazy(libraryInfo.docs).findWhere({ name: namespace }),
        members           = groupedByNamespace[namespace];

    return {
      namespace: namespace,
      constructorMethod: constructorMethod,
      members: members
    };
  })
  .toArray();

var templateData = localLazy(libraryInfo)
  .extend({
    javascripts: javascripts,
    namespaces: namespaces
  })
  .toObject();

if (helperExists) {
  templateData.javascripts.push('doc_helper.js');
}

var template = fs.readFileSync(path.join(__dirname, '../resources/docs.html.mustache'), 'utf-8'),
    docsHtml = Mustache.render(template, templateData);

function copyFile(source, destination, force) {
  // Don't obliterate files that are already there.
  // TODO: Think about this a bit more.
  if (force || !fs.existsSync(destination)) {
    fs.createReadStream(source).pipe(fs.createWriteStream(destination));
  }
}

if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir);
}

fs.writeFileSync(path.join(outputDir, 'index.html'), docsHtml);
copyFile(path.join(__dirname, '../resources/docs.css'), path.join(outputDir, 'docs.css'));
copyFile(path.join(__dirname, '../resources/gears.gif'), path.join(outputDir, 'gears.gif'));
copyFile(path.join(__dirname, '../resources/utils.js'), path.join(outputDir, 'utils.js'));
copyFile(path.join(__dirname, '../resources/docs.js'), path.join(outputDir, 'docs.js'));

console.log('Docs written to ' + outputDir + '/');
