#!/usr/bin/env node

/*
 * I apologize in advance to anyone reading this file.
 * It is a mess. Needs some serious refactoring.
 * My primary goal right now is to focus on making it just work,
 * specifically for Lazy.js (http://danieltao.com/lazy.js/).
 * Once that's done I will do my best to circle back and clean this up!
 */

var fs           = require('fs'),
    path         = require('path'),
    Breakneck    = require(path.join(__dirname, '../breakneck-node')),
    stringTable  = require('string-table'),
    commander    = require('commander'),
    Mustache     = require('mustache'),
    Lazy         = require('lazy.js');

require('colors');
require('should');

var packagePath = path.join(__dirname, '../package.json'),
    packageInfo = JSON.parse(fs.readFileSync(packagePath));

function argToList(arg) {
  return arg.split(/,\s*/);
}

commander
  .version(packageInfo.version)
  .usage('[options] [file]')

  // TODO: Implement these eventually
  // .option('-t, --test', 'run tests')
  // .option('-p, --perf', 'run performance benchmarks')

  .option('-v, --variable <name>', 'provide a name for the variable traditionally used by the library (e.g., jQuery, $, _) -- used for tests and benchmarks')
  .option('-o, --output <destination>', 'specify an output directory (defaults to "docs")')
  .option('--namespaces <names>', 'provide a comma-separated list of the namespaces to document (defaults to all, in alphabetical order)', argToList)
  .option('--javascripts <sources>', 'specify additional JS dependencies (comma-separated)', argToList)
  .option('--tags <tag>', 'only use the methods tagged with the specified tag')
  .parse(process.argv);

// Spit out help and exit if the user didn't supply an input file.
if (process.argv.length <= 2) {
  commander.help();
  process.exit();
}

var filePath     = Lazy(process.argv).last(),
    sourceCode   = fs.readFileSync(filePath, 'utf-8'),
    outputDir    = commander.output || 'docs',
    javascripts  = commander.javascripts || [],
    helperPath   = path.join(outputDir, 'doc_helper.js'),
    helperExists = fs.existsSync(helperPath),
    configPath   = path.join(outputDir, 'handlers.js'),
    configExists = fs.existsSync(configPath),
    templatePath = commander.template || path.join(__dirname, '../resources/docs.html.mustache'),
    template     = fs.readFileSync(templatePath, 'utf-8');

var processOpts = Lazy(commander)
  .pick(['namespaces', 'tags'])
  .defaults({
    namespaces: [],
    tags: []
  })
  .toObject();

var generateOpts = Lazy(commander)
  .pick(['javascripts'])
  .defaults({
    javascripts: [],
    template: template,
    templateEngine: Mustache
  })
  .toObject();

if (helperExists) {
  generateOpts.javascripts.push('doc_helper.js');
}

if (configExists) {
  // First of all, include it in the actual docs HTML.
  generateOpts.javascripts.push('handlers.js');

  // Also require it locally.
  generateOpts.config = require(path.join(process.cwd(), configPath));
}

var docsHtml = Breakneck.generate(template, sourceCode, {
  processOpts: processOpts,
  generateOpts: generateOpts
});

function writeFile(destination, content) {
  var directory = path.dirname(destination);
  if (!fs.existsSync(directory)) {
    fs.mkdirSync(directory);
  }

  fs.writeFileSync(destination, content);
}

writeFile(path.join(outputDir, 'index.html'), docsHtml);

function copyFile(source, destination, force) {
  // Don't obliterate files that are already there.
  // TODO: Think about this a bit more.
  if (force || !fs.existsSync(destination)) {
    fs.createReadStream(source).pipe(fs.createWriteStream(destination));
  }
}

copyFile(path.join(__dirname, '../resources/docs.css'), path.join(outputDir, 'docs.css'));
copyFile(path.join(__dirname, '../resources/gears.gif'), path.join(outputDir, 'gears.gif'));
copyFile(path.join(__dirname, '../resources/utils.js'), path.join(outputDir, 'utils.js'));
copyFile(path.join(__dirname, '../resources/docs.js'), path.join(outputDir, 'docs.js'));

console.log('Docs written to ' + outputDir + '/');
