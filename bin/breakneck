#!/usr/bin/env node

global.doctrine = require('doctrine');
global.esprima  = require('esprima');
global.Lazy     = require('lazy.js');
global.marked   = require('marked');

var fs          = require('fs'),
    path        = require('path'),
    Breakneck   = require(path.join(__dirname, '../breakneck')),
    stringTable = require('string-table'),
    commander   = require('commander'),
    Mustache    = require('mustache');

require('colors');
require('should');

var packagePath = path.join(__dirname, '../package.json'),
    packageInfo = JSON.parse(fs.readFileSync(packagePath));

function split(str) {
  return str.split(/,\s*/);
}

commander
  .version(packageInfo.version)
  .usage('[options] [file]')
  .option('-t, --test', 'Run tests')
  .option('-o, --output', 'Specify an output directory (defaults to "docs")')
  .option('-n, --namespaces <namespaces>', 'Provide a comma-separated list of the namespaces to document (defaults to all, in alphabetical order)', split)
  .option('-j, --javascripts <sources>', 'Specify additional JS dependencies (comma-separated)', split)
  .parse(process.argv);

function getLast(arr) {
  return arr[arr.length - 1];
}

var file = fs.readFileSync(getLast(process.argv), 'utf-8');

var libraryInfo = Breakneck.parse(file);

function runTests() {
  // Evaluate the file
  eval(file);

  // Run the tests
  Lazy(libraryInfo.docs)
    .filter(function(doc) { return doc.hasExamples; })
    .each(function(doc) {

      console.log(doc.name);

      var outcomes = [];
      Lazy(doc.examples).each(function(example) {
        var outcome = {
          'case': example.input,
          'expected': example.output
        };

        try {
          var actual   = eval(example.input),
              expected = eval(example.output);

          actual.should.eql(expected);

          outcome.result = 'PASS'.green;

        } catch (e) {
          outcome.result = e.message.red;
        }

        outcomes.push(outcome);
      });

      console.log(stringTable.create(outcomes));

    });
}

if (commander.test) {
  runTests();
  return;
}

var groupedByNamespace = Lazy(libraryInfo.docs)
  .groupBy('namespace')
  .toObject();



// Only include specified namespaces, if the option has been provided.
var namespaces = Lazy(commander.namespaces || Object.keys(groupedByNamespace))
  .map(function(namespace) {
    // Find the corresponding constructor, if one exists.
    var constructorMethod = Lazy(libraryInfo.docs).findWhere({ name: namespace }),
        members           = groupedByNamespace[namespace];

    return {
      namespace: namespace,
      constructorMethod: constructorMethod,
      members: members
    };
  })
  .toArray();

var templateData = Lazy(libraryInfo)
  .extend({
    javascripts: commander.javascripts,
    namespaces: namespaces
  })
  .toObject();

var outputDir = commander.output || 'docs';

if (fs.existsSync(path.join(outputDir, 'doc_helper.js'))) {
  templateData.javascripts.push('doc_helper.js');
}

var template = fs.readFileSync(path.join(__dirname, '../resources/docs.html.mustache'), 'utf-8'),
    docsHtml = Mustache.render(template, templateData);

function copyFile(source, destination, force) {
  // Don't obliterate files that are already there.
  // TODO: Think about this a bit more.
  if (force || !fs.existsSync(destination)) {
    fs.createReadStream(source).pipe(fs.createWriteStream(destination));
  }
}

if (!fs.existsSync(outputDir)) {
  fs.mkdirSync(outputDir);
}

fs.writeFileSync(path.join(outputDir, 'index.html'), docsHtml);
copyFile(path.join(__dirname, '../resources/docs.css'), path.join(outputDir, 'docs.css'));
copyFile(path.join(__dirname, '../resources/gears.gif'), path.join(outputDir, 'gears.gif'));
copyFile(path.join(__dirname, '../resources/docs.js'), path.join(outputDir, 'docs.js'), true);

console.log('Docs written to ' + outputDir + '/');
