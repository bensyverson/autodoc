#!/usr/bin/env node

var fs        = require('fs'),
    path      = require('path'),
    Breakneck = require(path.join(__dirname, '../breakneck-node')),
    commander = require('commander');

var packagePath = path.join(__dirname, '../package.json'),
    packageInfo = JSON.parse(fs.readFileSync(packagePath));

function argToList(arg) {
  return arg.split(/,\s*/);
}

commander
  .version(packageInfo.version)
  .usage('[options] [file]')

  // TODO: Implement this eventually
  // .option('-p, --perf', 'run performance benchmarks')

  .option('-t, --test', 'run tests')
  .option('-d, --dump', 'dump JSON data and exit')
  .option('-o, --output <destination>', 'specify an output directory (defaults to "docs")')
  .option('--template <path>', 'use a custom Mustache template')
  .option('--namespaces <names>', 'provide a comma-separated list of the namespaces to document (defaults to all, in alphabetical order)', argToList)
  .option('--javascripts <sources>', 'specify additional JS dependencies (comma-separated)', argToList)
  .option('--tags <tag>', 'only use the methods tagged with the specified tag')
  .option('--variable <name>', 'provide a name for the variable traditionally used by the library (e.g., jQuery, $, _) -- used for tests and benchmarks')
  .parse(process.argv);

// Spit out help and exit if the user didn't supply an input file.
if (process.argv.length <= 2) {
  commander.help();
  process.exit();
}

var filePath        = process.argv.pop(),
    sourceCode      = fs.readFileSync(filePath, 'utf-8'),
    outputDir       = commander.output || 'docs',
    handlersPath    = path.join(outputDir, 'handlers.js'),
    handlersExists  = fs.existsSync(handlersPath),
    equalityPath    = path.join(outputDir, 'assertEquality.js'),
    equalityExists  = fs.existsSync(equalityPath),
    docHelperPath   = path.join(outputDir, 'doc_helper.js'),
    docHelperExists = fs.existsSync(docHelperPath);

var options         = Breakneck.options;
options.namespace   = commander.namespaces;
options.tags        = commander.tags;
options.javascripts = commander.javascripts || [];

if (handlersExists) {
  // First of all, include it in the actual docs HTML.
  options.javascripts.push('handlers.js');

  // Also require it locally.
  options.exampleHandlers = require(path.join(process.cwd(), handlersPath)).exampleHandlers;
}

if (equalityExists) {
  // Same as w/ helpers
  options.javascripts.push('assertEquality.js');

  // (We'll use it locally in runTests)
}

if (docHelperExists) {
  options.javascripts.push('doc_helper.js');
}

function runTests() {
  var jasmine = require('jasmine-node'),
      env     = jasmine.getEnv();

  env.addReporter(new jasmine.TerminalVerboseReporter({
    print: process.stdout.write.bind(process.stdout),
    color: true,
    includeStackTrace: true
  }));

  global.exampleHandlers = options.exampleHandlers;

  global.assertEquality = equalityExists ?
    require(path.join(process.cwd(), equalityPath)).assertEquality :
    function(expected, actual) {
      expect(actual).toEqual(expected);
    };

  var templatePath = path.join(__dirname, '../resources/examples.js.mustache');

  options.template = fs.readFileSync(templatePath, 'utf-8');
  options.extraOptions = {
    variable: commander.variable,
    filePath: path.join(process.cwd(), filePath)
  };

  var examplesJs = Breakneck.generate(sourceCode, options);

  eval(examplesJs);

  env.execute();
}

function generateDocs() {
  var templatePath = commander.template ||
    path.join(__dirname, '../resources/docs.html.mustache');

  options.template = fs.readFileSync(templatePath, 'utf-8');

  var docsHtml = Breakneck.generate(sourceCode, options);

  function writeFile(destination, content) {
    var directory = path.dirname(destination);
    if (!fs.existsSync(directory)) {
      fs.mkdirSync(directory);
    }

    fs.writeFileSync(destination, content);
  }

  writeFile(path.join(outputDir, 'index.html'), docsHtml);

  function copyFile(source, destination, force) {
    // Don't obliterate files that are already there.
    // TODO: Think about this a bit more.
    if (force || !fs.existsSync(destination)) {
      fs.createReadStream(source).pipe(fs.createWriteStream(destination));
    }
  }

  copyFile(path.join(__dirname, '../resources/docs.css'), path.join(outputDir, 'docs.css'));
  copyFile(path.join(__dirname, '../resources/gears.gif'), path.join(outputDir, 'gears.gif'));
  copyFile(path.join(__dirname, '../resources/utils.js'), path.join(outputDir, 'utils.js'));
  copyFile(path.join(__dirname, '../resources/docs.js'), path.join(outputDir, 'docs.js'));

  console.log('Docs written to ' + outputDir + '/');
}

if (commander.dump) {
  console.log(JSON.stringify(Breakneck.parse(sourceCode, options), null, 2));

} else if (commander.test) {
  runTests();

} else {
  generateDocs();
}
