#!/usr/bin/env node

var fs   = require('fs'),
    path = require('path');

// External dependencies -- adding weird prefixes here to prevent name
// collisions when actually testing any of these libraries (by which I really
// just mean Autodoc, clearly).
var _Autodoc   = require(path.join(__dirname, '../autodoc-node')),
    _Lazy      = require('lazy.js'),
    _commander = require('commander');

// Read package info from package.json -- just one less thing to keep track of.
var packagePath = path.join(__dirname, '../package.json'),
    packageInfo = JSON.parse(readFile(packagePath));

function argToList(arg) {
  return arg.split(/,\s*/);
}

function argToGlobalsList(arg) {
  var list = argToList(arg);
  var pairs = _Lazy(list).map(function(pair) {
    pair = pair.split(':');

    return {
      variable: pair[0],
      library: pair[1]
    };
  });

  return pairs.toArray();
}

function fileExists(filePath) {
  return (fs.existsSync || path.existsSync)(filePath);
}

function readFile(filePath) {
  return fs.readFileSync(filePath, 'utf-8');
}

function readPartialsFromFolder(folder) {
  return _Lazy(fs.readdirSync(folder))
    .map(function(fileName) {
      return fileName.match(/^_(.*\.js\.mustache)/);
    })
    .compact()
    .map(function(match) {
      return [
        path.basename(match[1], '.js.mustache'),
        readFile(path.join(folder, match[0]))
      ];
    })
    .toObject();
}

_commander
  .version(packageInfo.version)
  .usage('[options] [file]')
  .option('-t, --test', 'run tests')
  .option('-p, --perf', 'run performance benchmarks')
  .option('-d, --dump', 'dump data to console and exit')
  .option('-o, --output <destination>', 'specify an output directory (defaults to "docs")')
  .option('--template <path>', 'use a custom Mustache template')
  .option('--namespaces <names>', 'provide a comma-separated list of the namespaces to document (defaults to all, in alphabetical order)', argToList)
  .option('--javascripts <sources>', 'specify additional JS dependencies (comma-separated)', argToList)
  .option('--tags <tag>', 'only use the methods tagged with the specified tag')
  .option('--grep <pattern>', 'only run tests/benchmarks for methods whose names match the given pattern')
  .option('--variable <name>', 'provide a name for the variable traditionally used by the library (e.g., jQuery, $, _) -- used for tests and benchmarks')
  .option('--globals <list>', 'provide a list of global references (e.g. _:underscore,$:jQuery) your tests and/or benchmarks require', argToGlobalsList)
  .option('--verbose', 'produce verbose output when running tests (has no effect otherwise)')
  .parse(process.argv);

// Spit out help and exit if the user didn't supply an input file.
if (process.argv.length <= 2) {
  _commander.help();
  process.exit();
}

var filePath        = process.argv.pop(),
    sourceCode      = readFile(filePath),
    outputDir       = _commander.output || 'docs',
    handlersPath    = path.join(outputDir, 'handlers.js'),
    handlersExists  = fileExists(handlersPath),
    equalityPath    = path.join(outputDir, 'assertEquality.js'),
    equalityExists  = fileExists(equalityPath),
    docHelperPath   = path.join(outputDir, 'doc_helper.js'),
    docHelperExists = fileExists(docHelperPath);

var options         = _Autodoc.options;
options.namespace   = _commander.namespaces;
options.tags        = _commander.tags;
options.grep        = _commander.grep;
options.javascripts = _commander.javascripts || [];

// Always (?) include a reference to the library itself.
// TODO: Rethink this. Hard-coding a path starting w/ '../' is dumb; there's no
// guarantee that will be the correct relationship between outputDir and the
// current working directory.
var relativePath = '../' + path.basename(filePath);
if (!_Lazy(options.javascripts).contains(relativePath)) {
  options.javascripts.push(relativePath);
}

var defaults = require(path.join(__dirname, '../resources/javascripts/defaults.js'));

global.assertEquality  = defaults.assertEquality;
global.exampleHandlers = defaults.exampleHandlers;

var resourcesDir = path.join(__dirname, '../resources');
options.templatePartials = _Lazy(readPartialsFromFolder(resourcesDir))
  .extend(readPartialsFromFolder(outputDir))
  .toObject();

if (handlersExists) {
  // First of all, include it in the actual docs HTML.
  options.javascripts.push('handlers.js');

  // Also require it locally.
  global.exampleHandlers = require(path.join(process.cwd(), handlersPath)).exampleHandlers
    .concat(global.exampleHandlers);
}

options.exampleHandlers = global.exampleHandlers;
options.extraOptions = {
  globals: _commander.globals || [],
  filePath: _Autodoc.escapeJsString(path.join(process.cwd(), filePath))
};

if (equalityExists) {
  // Same as w/ helpers
  options.javascripts.push('assertEquality.js');

  // We attach assertEquality to the global context because it's only used
  // within the tests themselves, not within Autodoc (so no need to add it to
  // options).
  global.assertEquality = require(path.join(process.cwd(), equalityPath)).assertEquality || global.assertEquality;
}

if (docHelperExists) {
  options.javascripts.push('doc_helper.js');
}

var libraryInfo = _Autodoc.parse(sourceCode, options);

options.extraOptions.variable = _commander.variable ||
  libraryInfo.referenceName || '__lib__';

function runTests() {
  var templatePath = path.join(__dirname, '../resources/examples.js.mustache');

  options.template = readFile(templatePath);

  var examplesJs = _Autodoc.generate(libraryInfo, options);

  eval(examplesJs);

  return examplesJs;
}

function runBenchmarks() {
  var templatePath = path.join(__dirname, '../resources/benchmarks.js.mustache');

  options.template = readFile(templatePath);

  var benchmarksJs = _Autodoc.generate(libraryInfo, options);

  eval(benchmarksJs);

  return benchmarksJs;
}

function generateDocs() {
  var templatePath = _commander.template ||
    path.join(__dirname, '../resources/docs.html.mustache');

  options.template = readFile(templatePath);

  var docsHtml = _Autodoc.generate(sourceCode, options);

  function writeFile(destination, content) {
    var directory = path.dirname(destination);
    if (!fileExists(directory)) {
      fs.mkdirSync(directory);
    }

    fs.writeFileSync(destination, content);
  }

  writeFile(path.join(outputDir, 'index.html'), docsHtml);

  function copyFile(source, destination, force) {
    // Don't obliterate files that are already there.
    // TODO: Think about this a bit more.
    if (force || !fileExists(destination)) {
      fs.createReadStream(source).pipe(fs.createWriteStream(destination));
    }
  }

  copyFile(path.join(__dirname, '../resources/stylesheets/docs.css'), path.join(outputDir, 'docs.css'));
  copyFile(path.join(__dirname, '../resources/images/gears.gif'), path.join(outputDir, 'gears.gif'), true);
  copyFile(path.join(__dirname, '../resources/javascripts/utils.js'), path.join(outputDir, 'utils.js'), true);
  copyFile(path.join(__dirname, '../resources/javascripts/docs.js'), path.join(outputDir, 'docs.js'), true);
  copyFile(path.join(__dirname, '../resources/javascripts/defaults.js'), path.join(outputDir, 'defaults.js'), true);

  console.log('Docs written to ' + outputDir + '/');

  return docsHtml;
}

if (_commander.test) {
  var examplesJs = runTests();

  if (_commander.dump) {
    console.log(examplesJs);
  }
}

if (_commander.perf) {
  var perfJs = runBenchmarks();

  if (_commander.dump) {
    console.log(perfJs);
  }
}

if (!(_commander.test || _commander.perf)) {
  generateDocs();

  if (_commander.dump) {
    console.log(JSON.stringify(libraryInfo, null, 2));
  }
}
